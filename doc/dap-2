This is dap, produced by makeinfo version 4.5 from dap.texi.

INFO-DIR-SECTION Dap statistics and graphics package
START-INFO-DIR-ENTRY
* Dap: (dap).                The Dap statistics package
END-INFO-DIR-ENTRY


File: dap,  Node: Splitting and joining lines,  Next: Grouping lines in a dataset,  Prev: Displaying a dataset,  Up: Managing and displaying data

Splitting and joining lines
===========================

SPECIFICATION
     split(DATASET, VARIABLE-LIST, CLASS-VALUE-VARS)
     DATASET, VARIABLE-LIST, CLASS-VALUE-VARS: string

Description

   For each line of DATASET, writes to DATASET.spl one line for each
variable in VARIABLE-LIST, with the value of the first variable in
CLASS-VALUE-VARS set to the name of that variable and the value of the
second set to the value.  All the variables in VARIABLE-LIST must have
the same type, which will be the type of the second variable in
CLASS-VALUE-VARS.  All variables in DATASET except those VARIABLE-LIST
appear in DATASET.spl, in addition to the two new variables named in
CLASS-VALUE-VARS.  This function is useful for preparing a dataset for
function `table'.

Code fragment(s)

   _Create a new dataset `people.spl' that is a copy of `people' except
that each person's height and weight are on consecutive lines so that
`table' can be called to display both values on the same line:_
     split("people", "height weight", "statname statistic");
     table("people.spl", "name", "statname statistic", "6.0", "");

SPECIFICATION
     join(DATASET, PARTVARS, VALUE-VAR)
     DATASET, PARTVARS, VALUE-VAR: string

Description

   For consecutive lines in DATASET distinguished by values of the last
variable named in PARTVARS, which must be a string variable, writes one
line to DATASET.joi.  In each part of DATASET specified by all but the
last variable named in PARTVARS, for each distinct value of the last
variable named in PARTVARS, the new dataset DATASET.joi contains one
new variable whose name is that value and whose value is set to the
value of VALUE-VAR in the corresponding line of DATASET.  DATASET must
be sorted by PARTVARS and the same set of values of the last variable
named in PARTVARS must occur in every part defined by all the variables
but the last in PARTVARS.  Neither the last variable name in PARTVARS
nor the variable VALUE-VAR appears in DATASET.joi.  This function is
useful, for example, for preparing a dataset for function `plot'.

Code fragment(s)

   _Create a new dataset `people.joi' that is a copy of `people' except
that each person's height and weight, which were given as values of the
variable `statistic' of type double, on separate lines identified by
the values `height' and `weight' of the string variable `statname', now
appear as variables named `height' and `weight' on a single line:_
     join("people", "city name statname", "statistic");
     nport(plot("people.joi", "height weight", "city",
                 "", NULL, NULL, 3), 3, 1);


File: dap,  Node: Grouping lines in a dataset,  Next: Trimming extreme values,  Prev: Splitting and joining lines,  Up: Managing and displaying data

Grouping lines in a dataset
===========================

SPECIFICATION
     group(DATASET, VARIABLE-SPECIFICATION, PARTVARS)
     DATASET, VARIABLE-SPECIFICATION, PARTVARS: string

     proc rank [data=DATASET-NAME] [out=DATASET-NAME]
               [{fraction | f | percent | p | groups=NUMBER}];
     by VARIABLE-LIST;
     [ranks NEW-VARIABLE-LIST;]
     var VARIABLE-LIST;

Description

   Writes to DATASET.grp the observations of DATASET, grouped according
to the VARIABLE-SPECIFICATION.  Groups are numbered consecutively and
are formed as specified by VARIABLE-SPECIFICATION. DATASET only needs
to be sorted by PARTVARS, if there are any.

   If VARIABLE-SPECIFICATION begins with either `#', `/', or `%' then
for each observation, GROUP computes either the number of the
observation or the fraction of the total number of observations or the
percent of the total number of observations, respectively.  `#', `/',
or `%' may be followed by a space and one of `+', `-', `+1', `+0',
`-1', or `-0' to indicate ascending order, starting from 0, descending
order, ending at 0, ascending order, starting from 1, ascending order,
starting from 0, descending order, ending at 1, or descending order,
ending at 0, respectively; the default is ascending order, starting
from 1.  This may in turn may be followed by a space-separated list of
variables: only those observations of the dataset for which all of
these variables have a finite (i.e., non-NaN) value are given group
numbers and the remaining observations are given a group number of NaN.

   If VARIABLE-SPECIFICATION does not begin with `#', `/', or `%', then
it must be a space-separated list of VARIABLE-NAME NGROUPS-METHOD, in
which NGROUPS-METHOD is either an integer followed by `^' (no space in
between) for that number of groups of equal width from the smallest
observation to the largest or an integer followed by `#' (no space in
between), for that number of groups of (approximately) equal counts
from the smallest observation to the largest.  Only those observations
for which all the grouping variables have finite (i.e., non-NaN) values
are given group numbers and the remaining observations are given a
group number of NaN.  The numbering of the groups starts at 1.

   In addition to all variables in DATASET, the output dataset contains
for each grouping variable, which must be of type double, a new
variable whose name is formed by preceding the original variable name
with an underscore (`_'); this new variable, which is also of type
double, contains the group number of the value of the original variable.
If only `#', `/', or `%', was requested, then the new variable is named
`_N_'.

   SBS note: In `proc rank', the `ranks' statement is ignored: the
output data set always contains new variables for the ranks, as in the
dap function `group'.

Code fragment(s)

   _Create a new dataset `people.grp' that is a copy of `people' except
that it has an additional variable named `_N_' that contains the line
number, starting at 1:_
     group("people", "#", "");

   _Create a new dataset `people.grp' that is a copy of `people' except
that it has an additional variable named `_N_' that contains the line
number, starting at 0:_
     group("people", "# +0", "");

   _Create a new dataset `people.grp' that is a copy of `people' except
that it has an additional variable named `_height' that contains a
number from 1 to 5 that indicates the quintile of the value of
`height':_
     group("people", "height 5#", "");

   _Create a new dataset `people.grp' that is a copy of `people' except
that it has an additional variable named `_height' that contains a
number from 1 to 5 that indicates which of 5 equal length intervals,
starting at the smallest value of `height' and ending at the largest,
contains the value of `height':_
     group("people", "height 5^", "county");


File: dap,  Node: Trimming extreme values,  Prev: Grouping lines in a dataset,  Up: Managing and displaying data

Trimming extreme values
=======================

SPECIFICATION
     trim(DATASET, TRIM-SPECIFICATION, PARTVARS)
     DATASET, TRIM-SPECIFICATION, PARTVARS: string

Description

   Writes to DATASET.trm the observations from DATASET for which the
values of all of the variables in TRIM-SPECIFICATIONS do not lie in the
upper or lower percent indicated in TRIM-SPECIFICATIONS.  The string
TRIM-SPECIFICATIONS consists of space-separated pairs of VARIABLE-NAME
PERCENT.  The variables listed in TRIM-SPECIFICATIONS must be of type
double.

Code fragment(s)

   _Create a new dataset named `wheat.trm' that contains only those
values of `yield' that do not lie in the upper or lower 5% of all the
values of `yield':_
     trim("wheat", "yield 5", "");

   _Create a new dataset named `wheat.trm' that contains only those
lines of `wheat' whose value of `yield' does not lie in the upper or
lower 5% of all the values of `yield' and, simultaneously, whose value
of `nitrogen' does not lie in the upper or lower 10% of all the values
of `nitrogen':_
     trim("wheat", "yield 5 nitrogen 10", "");


File: dap,  Node: Statistics functions,  Next: Graphics functions,  Prev: Managing and displaying data,  Up: Top

Statistics functions
********************

* Menu:

* One variable statistics:: means and pctiles
* Correlations:: corr
* Analysis of variance:: effects, ftest, and lsmeans
* Categorical data analysis:: freq, categ, and loglin
* Linear regression:: linreg
* Logistic regression:: logreg
* Nonparametric analyses:: nonparam
* Statistics utilities:: estimate


File: dap,  Node: One variable statistics,  Next: Correlations,  Up: Statistics functions

One variable statistics
=======================

SPECIFICATION
     means(DATASET, VARIABLE-SPECIFICATION, STAT-LIST, PARTVARS)
     DATASET, VARIABLE-SPECIFICATION, STAT-LIST, PARTVARS: string

     proc means [data=DATASET-NAME] [noprint] [STATISTICS-LIST]
                [vardf={df | wdf}];
     var VARIABLE-LIST;
     weight VARIABLE;
     by VARIABLE-LIST;
     output [out=DATASET-NAME];

Description

   Writes to DATASET.mns the statistics requested in STAT-LIST for the
variables in VARIABLE-SPECIFICATION, which must be of type double.  The
`means' function does not display its results in the `lst' file; use
`print' or `table' (*Note Displaying a dataset::) after calling `means'
to display the results from DATASET.mns.  The statistics are given as
values of the variables named in VARIABLE-SPECIFICATION in DATASET.mns.
The string STAT-LIST is a space separated list of one or more of the
following statistics:

   MAX

     the maximum of the variable values

   MEAN

     the mean of the variable values

   MIN

     the minimum of the variable values

   N

     the number of finite observations

   RANGE

     the maximum minus the minimum of the variable values

   SD or STD

     the sample standard deviation of the variable values (df = number
     of observations - 1)

   SDFREQ

     the weighted sample standard deviation of the weighted variable
     values (df = sum of weights - 1)

   SEM or STDERR

     the sample standard error of the mean of the variable values (df =
     number of observations - 1)

   SEMFREQ

     the weighted sample standard error of the mean of the variable
     values (df = sum of weights - 1)

   STEPxxxx

     a sequence of XXXX + 1 equally spaced numbers from the minimum to
     the maximum of the variable values, with xxxx an integer of at
     most 4 digits

   SUM

     the sum of the variable values

   SUMWT

     the sum of the weight variable values

   T

     the value of the t-statistic for the variable values

   TPROB or PRT

     the (two-tailed) probability that the absolute value of the
     t-statistic would equal or exceed the observed value

   VAR

     the sample variance of the variable values (df = number of
     observations - 1)

   VARFREQ

     the weighted sample variance of the variable values (df = sum of
     weights - 1)

   VARM

     the sample variance of the mean of the variable values (df =
     number of observations - 1)

   VARMFREQ

     the weighted sample variance of the variable values (df = sum of
     weights - 1)

   For each observation in the output data set, the `_type_' variable
names the statistic whose value is given for the requested variable.
If the only statistic requested is `N', then VARIABLE-LIST may consist
of a single variable which need not be present in the input data set.
The string VARIABLE-SPECIFICATION is a space-separated list of
variables except that each weight variable is preceded by an `*'.  For
example,

     w x * u y z * v

indicates that each value of W and X is weighted by the value of U and
that each value of Y and Z is weighted by the value of V.

   For each variable separately, means discards values for which either
the value itself or its weight value, if any, is a NaN.  The number of
discarded values for each variable is reported in the `log' file.

Code fragment(s)

   _For each distinct value of the variable `plot', compute and display
the number of observations in dataset `wheat' and the mean and variance
of the values of `yield' and `height':_
     means("wheat", "yield height", "N MEAN VAR", "plot");
     table("wheat.mns", "plot", "_type_ yield", "s6.1", "");
     table("wheat.mns", "plot", "_type_ height", "s6.1", "");

   _For each distinct value of the variable `county', compute and
display the number of observations in dataset `wheat' and the mean and
variance of the value of `meanyield', weighted by `acres':_
     means("wheat", "meanyield * acres", "N MEAN VAR", "county");
     table("wheat.mns", "county", "_type_ meanyield", "s6.1", "");

   _For each distinct value of the pair of variables `last' and
`first', compute the number of observations in dataset `names':_
     means("names", "nrecords", "N", "last first");

SPECIFICATION
     pctiles(DATASET, VARIABLE-SPECIFICATION, STAT-LIST, PARTVARS)
     DATASET, VARIABLE-SPECIFICATION, STAT-LIST, PARTVARS: string

     proc univariate [data=DATASET-NAME] [noprint] [normal] [plot];
     var VARIABLE-LIST;
     by VARIABLE-LIST;
     weight VARIABLE;
     output [out=DATASET-NAME] [STATISTICS-LIST];

Description

   Writes to DATASET.pct the statistics requested in STAT-LIST for the
variables VARIABLE-SPECIFICATION, which must be of type double.  The
`pctiles' function does not display its results in the `lst' file; use
`print' or `table' (*Note Displaying a dataset::) after calling
`pctiles' to display the results from DATASET.pct.  The statistics are
given as values of the variables named in VARIABLE-SPECIFICATION in
DATASET.pct.  The string STAT-LIST is a space separated list of one or
more of the following statistics:

   MAX

     the maximum

   MED or MEDIAN

     the median

   MIN

     the minimum

   N

     the number of observations

   P1

     the 1% point

   P5

     the 5% point

   P10

     the 10% point

   P90

     the 90% point

   P95

     the 95% point

   P99

     the 99% point

   Q1

     the first quartile

   Q3

     the third quartile

   QRANGE

     the interquartile range

   RANGE

     the range

   Up to 9 additional percentile points can be specified in the form
`PXXXXX' in which `xxxxx' is a number, which may contain up to 5
characters, including a decimal point.

   The string VARIABLE-SPECIFICATION is a space-separated list of
variables except that each weight variable is preceded by an `*'.  For
example,

     w x * u y z * v

indicates that each value of W and X is weighted by the value of U and
that each value of Y and Z is weighted by the value of V.

Code fragment(s)

   _Compute and display the 10th, 25th, 50th (median), 75th, and 90th
percentiles of `income' for each `county' in the dataset `people':_
     pctiles("people", "income", "P10 P25 MED P75 P90", "county");
     table("people.pct", "county", "_type_ income", "s7.2", "");

   _Compute and display the 37.5th, 50th (median), and 62.5th
percentiles of `income' for each `county' in the dataset `people':_
     pctiles("people", "income", "P37.5 MED P62.5", "county");
     table("people.pct", "county", "_type_ income", "s7.2", "");


File: dap,  Node: Correlations,  Next: Analysis of variance,  Prev: One variable statistics,  Up: Statistics functions

Correlations
============

SPECIFICATION
     corr(DATASET, VARIABLE-LIST, PARTVARS)
     DATASET, VARIABLE-LIST, PARTVARS: string

     proc corr [data=DATASET-NAME] [outp=DATASET-NAME] [noprint];
     var VARIABLE-LIST;
     by VARIABLE-LIST;

Description

   Writes to DATASET.cor the correlation statistics and their
significances for all pairs of the variables, each of which must be of
type double, in VARIABLE-LIST.  The `corr' function does not display
its results in the `lst' file; use `print' or `table' (*Note Displaying
a dataset::) after calling `corr' to display the results from
DATASET.cor.  The output dataset contains the variables `_var1_',
`_var2_', and `_corr_' in addition to all the variables in PARTVARS.
There is one pair of correlation and significance values for each pair
of numeric variables.  For each line of the output data set, `_var1_',
and `_var2_', contain the names of the variables being reported on and
`_corr_' contains the number of observations, the correlation
coefficient, or its significance, as indicated by the values `N',
`CORR', and `PCORR' of the `_type_' variable, respectively.

Code fragment(s)

   _Compute and display the correlations and their signficances for
each pair of the variables `height', `weight', and `income':_
     corr("people", "height weight income", "");
     sort("people.cor", "_type_ _var1_ _var2_", "");
     table("people.cor.srt", "_var1_", "_var2_ _corr_", "6.2", "_type_");


File: dap,  Node: Analysis of variance,  Next: Categorical data analysis,  Prev: Correlations,  Up: Statistics functions

Analysis of variance
====================

SPECIFICATION
     effects(DATASET, VARIABLE-LIST, MODEL, PARTVARS)
     DATASET, VARIABLE-LIST, MODEL, PARTVARS: string

     proc glm [data=DATASET-NAME];
     class VARIABLE-LIST;
     model RESPONSE-VARIABLE = EFFECTS-LIST;
     by VARIABLE-LIST;
     contrast "LABEL" EFFECT COEFFICIENT-LIST [/ e=EFFECT];
     lsmeans EFFECT-LIST / [e=EFFECT] [alpha=N] {DUNNETT | TUKEY | LSD};
     test h=EFFECT-LIST e=EFFECT;

Description

   For DATASET, created by MEANS with `N', `MEAN', and `VAR', but no
other statistics requested, EFFECTS constructs a dataset named
DATASET.con appropriate for `ftest' and then calls `ftest' on the set
of contrasts specified by all the terms together in MODEL.  `Ftest' can
be used on DATASET.con to perform F-tests on the contrasts that
correspond to individual terms in the model.  The first variable in
VARIABLE-LIST is the response variable, which must be of type double,
and the remainder are the treatment variables, all of which must be of
type string.  The string MODEL is a space-separated list of terms in
the model; all possible terms not in the model are considered to be in
the error, in addition to the cell variances (if any).  Each term is
either a treatment or a cross of two or more treatments, which is
indicated by an `*' separated list of treatments.  Nesting can be
specified by including an effect in a cross term without that effect
appearing as a main effect.  NOTE: In the current version, 3.5, nested
designs must be balanced and the levels of the nested factors must be
the same for each set of levels of the factors within which they are
nested; presumably, this will be corrected in later versions.

   The output dataset DATASET.con contains a variable named `_term_',
of type int, which indicates which terms the error and contrast lines
refer to: each bit in `_term_', with the lowest order bit corresponding
to the first treatment variable, indicates whether the correspondingly
numbered treatment in the model is included in the term.  The error,
contrast, and least-squares means terms in DATASET.con are adjusted for
missing cells, but only the error terms are orthogonalized.

   SBS note: All the variables used in the EFFECTS-LIST of the `model'
statement must be named in the `class' statement, as dap only allows
categorical, string-valued, variables for the terms in the model.
Specify crossed and nested effects using `*' only.  A `test' statement
automatically computes an appropriate combination of mean squares from
the terms in `e=' error term list, if possible, to test the numerator
and applies the Satterthwaite approximation.  An `lsmeans' statement
that has an `e=' option or that appears after a `contrast', a `test',
or another LSMEANS statement automatically runs an F-test with the same
denominator.  In each `contrast' statement, the effect to be tested
must be a main effect, the coefficients must appear in the sorting
order of the levels of that effect, they must be integers, and they
must sum to zero.  For more complicated contrasts, see *Note Analysis
of variance examples::.

Code fragment(s)

   _Perform an analysis of variance on the completely randomized
one-way layout with response variable `yield' and treatment `fert':_
     effects("wheat.srt.mns", "yield fert", "fert", "");

   _Perform an analysis of variance (F-test on the model only) on the
one-way layout in a completely randomized block design with response
variable `yield' and treatment `fert', blocked by `block', with main
effects only:_
     effects("wheat.srt.mns", "yield fert block",
                      "fert block", "");

   _Perform an analysis of variance (F-test on the model only) on the
two-way layout in a completely randomized block design with response
variable `yield' and treatments `fert' and `variety', blocked by
`block', with main effects and treatment interaction:_
     effects("wheat.srt.mns", "yield fert variety block",
                      "fert variety fert*variety block", "");

SPECIFICATION
     ftest(DATASET, VARIABLE-LIST, NUMERATOR, DENOMINATOR, PARTVARS)
     DATASET, VARIABLE-LIST, NUMERATOR, DENOMINATOR, PARTVARS: string

Description

   Performs an F-test on the hypothesis that all the contrasts
specified by NUMERATOR are zero, using the terms specified by
DENOMINATOR, and the variances of the cell means, as appropriate, as
the error.  The string VARIABLE-LIST must list the response variable
followed by all the variables in the model and error terms.

   The input dataset must have the following format: for each cell,
there must be a line for the mean, the number of observations for that
cell, and the variance (these three may be in any order) followed by
the denominator terms and then the numerator terms.  These lines are
identified respectively by the following values of the `_type_'
variable: `MEAN', `N', `VAR', `ERROR', and `CONTR'.  Additional lines,
such as `LSMEAN', lines, may follow.  The numerator and denominator
terms used for the test, which need to be adjusted for missing data (as
is done by effects) but which do not need to be orthogonal, are
identified by the value of the `_term_' variable in dataset (see
`effects').  If NUMERATOR is null, then all the terms identified as
`CONTR' are used in the test.  If DENOMINATOR is null, then the cell
variances and all the terms identified as `ERROR' are used in the test.
If DENOMINATOR is non-null, then the cell variances are not included in
the test and `ftest' constructs an appropriate combination of mean
squares from the terms in that denominator to test the numerator and
applies the Satterthwaite approximation.  Note, however, that
DENOMINATOR must contain all possible terms that might be needed to
construct that combination of mean squares.

   The function FTEST writes out a dataset, with the suffix of DATASET
replaced by .tst, which contains only those error, contrast, and
least-squares means terms appearing in dataset that appear in the test.
This file is suitable for input to LSMEANS.  At the end of that file
are two lines, the first with the mean-squared error appearing as the
value of the response variable and the second with the error degrees of
freedom appearing as the value of the response variable.  These lines
are identified by the _type_ variable as `MSERROR' and `ERRORDF',
respectively.

Code fragment(s)

   _Perform an F-test on the interaction term in the in the two-way
layout in a completely randomized block design with response variable
`yield' and treatments `fert' and `variety', blocked by `block' as a
fixed effect, with main effects and treatment interaction:_
     ftest("wheat.srt.mns.con", "yield fert variety block",
                                         "fert*variety", "", "");

   _Perform an F-test on the interaction term in the in the two-way
layout in a completely randomized block design with response variable
`yield' and treatments `fert' and `variety', blocked by `block' as a
random effect, with main effects and treatment interaction:_
     ftest("wheat.srt.mns.con", "yield fert variety block", "fert",
                                         "block fert*block", "");

SPECIFICATION
     lsmeans(DATASET, METHOD, ALPHA, VARIABLE-LIST, TREAT, PARTVARS, FORMAT)
     DATASET, METHOD, VARIABLE-LIST, TREAT, PARTVARS, FORMAT: string
     ALPHA: double

Description

   For DATASET produced by `ftest' whose NUMERATOR is the same as the
TREAT of `lsmeans', computes the least-squares means of the levels of
TREAT and reports the minimum difference significant at level ALPHA and
places the comparison of them according to METHOD in a dataset named
DATASET-NAME.lsm, and displays a table of results, the cells of which
are formated according to FORMAT as for TABLE.  The available methods
are `LSD', `TUKEY', and `DUNNETT'.  For `DUNNETT', the first level of
TREAT is taken to be the control.

Code fragment(s)

   _Compute and test, using the LSD method with significance level
0.05, least squares means for the one-way layout in a completely
randomized block design with response variable `yield' and treatment
`fert', blocked by `block', with main effects only; the table of
results is displayed with cells 6 characters long and values to 1
decimal place:_
     lsmeans("data.srt.mns.tst", "LSD", 0.05,
                         "yield treat block", "block", "", "8.4");


File: dap,  Node: Categorical data analysis,  Next: Linear regression,  Prev: Analysis of variance,  Up: Statistics functions

Categorical data analysis
=========================

SPECIFICATION
     freq(DATASET, VARIABLE-LIST, STAT-LIST, PARTVARS)
     DATASET, VARIABLE-LIST, STAT-LIST, PARTVARS: string

     proc freq [data=DATASET-NAME];
     by VARIABLE-LIST;
     tables VARIABLE-1 [* VARIABLE-2 [... * VARIABLE-N]] /
                  [out=DATASET-NAME] [noprint] [nofreq] [noprecent]
                  [norow] [nocol] [STATISTICS-LIST];
     weight VARIABLE;

Description

   Writes dataset DATASET.frq with the variable `_cell_', of type
double, set equal to the count, fraction, percent, or expected value
under independence, as requested by STAT-LIST for the cells with
distinct values of the variables in VARIABLE-LIST.  The dataset DATASET
must be sorted by VARIABLE-LIST.  The `freq' function does not display
its results in the `lst' file; use `print' or `table' (*note Displaying
a dataset::) after calling `freq' to display the results from
DATASET.frq.  If VARIABLE-LIST contains a count-variable, which must
appear last in the list and must be preceded by an `*' and which must
be of type double, then the count, fraction, or percent is weighted by
the values of that count-variable for that cell.  The string STAT-LIST
is a space separated list of one or more of the following statistics:

   CHISQ

     for 2-dimensional tables, compute Pearson's chi-squared statistic
     and test

   CMH

     for tables of dimension 3 or higher, compute the
     Cochran-Mantel-Haenszel statistic and test, with strata defined by
     the levels of all but the last two variables in VARIABLE-LIST

   COLPERC

     the percent of the number of observations in the column

   COUNT

     the number of observations

   EXPECTED

     for 2-dimensional tables, the expected table entry under
     independence, conditioned on the marginal totals

   FISHER

     for 2x2 tables, computes Fisher's exact test

   FRACTION

     the fraction of the total number of observations

   NOMINAL

     for 2-dimensional tables, compute the following measures of
     association of nominal variables and their asymptotic standard
     errors: uncertainty coefficients

   ODDSRAT

     for 2x2 tables, computes the odds ratio

   ORDINAL

     for 2-dimensional tables, compute the following measures of
     association of ordinal variables and their asymptotic standard
     errors: gamma, Kendall's Tau-b, and Somers' D (column on row and
     row on column)

   PAIR

     for 2-dimensional tables, compute measures of association for
     matched pairs and their asymptotic standard errors

   PERCENT

     the percent of the total number of observations

   ROWPERC

     the percent of the number of observations in the row

   For `CHISQ', `FISHER', `ODDSRAT', and `ORDINAL', the requested
statistic and, if applicable, test is displayed in the `lst' file.  For
`COUNT', `EXPECTED', `FRACTION', and `PERCENT', the requested `_cell_'
values are indicated in DATASET.frq by the corresponding value of the
`_type_' variable.  The input dataset must be sorted by the variables
named in PARTVARS and VARIABLE-LIST.

Code fragment(s)

   _For each `state' and `county' in the dataset `people', compute and
display the cell percentages for a two-way table whose rows are labeled
by `education' and whose columns are labeled by `education':_
     freq("people", "education income", "PERCENT", "state county");
     table("people.frq", "education", "income _cell_",
                                                  "3.0", "state county");

   _For each `county' in the dataset `people', compute and display the
cell counts for a two-way table whose rows are labeled by `education'
and whose columns are labeled by `education'; also compute and display
the cell counts expected under independence and the Chi-squared
statistic and its significance:_
     freq("people", "education income", "COUNT EXPECTED CHISQ", "county");
     sort("people.frq", "county _type_ education income", "");
     table("people.frq.srt", "education", "income _cell_",
                                                  "6.0", "county _type_");

   _For each `state' and `county' in the dataset `people', compute and
display the cell percentages within row for a two-way table whose rows
are labeled by `education' and whose columns are labeled by
`education':_
     freq("people", "education income", "ROWPERC", "state county");
     table("people.frq", "education", "income _cell_",
                                                  "3.0", "state county");

   _For the dataset `rabbits.srt', compute the Cochran-Mantel-Haenszel
statistic and its significance for a three-way table that is stratified
by `penicillin' and, within each stratum, whose rows are labeled by
`delay' and whose columns are labeled by `response' and whose cell
counts are given by `count'; :_
     freq("rabbits.srt", "penicillin delay response*count", "CMH", "");

SPECIFICATION
     categ(DATASET, VARIABLE-LIST, AUX-VARIABLE-LIST, EXPECT, PARAM, SELECT, PARTVARS, TRACE)
     DATASET, VARIABLE-LIST, AUX-VARIABLE-LIST, SELECT, PARTVARS, TRACE: string
     EXPECT: pointer to function returning double
     PARAM: array of double

Description

   `Categ' fits the model specified by the function EXPECT and the
parameter selection string SELECT to the data by the method of maximum
likelihood, reports goodness of fit statistics from the comparison of
the specified model with either a reduced model or the saturated model,
writes the observed and fitted cell counts to DATASET.cat, with the
`_type_' variable set to `OBS' and `FIT', respectively, and the
estimates and the covariance matrix to DATASET.cov, with the `_type_'
variable set to `ESTIMATE' and `COVAR', respectively, the `_param1_'
and `_param2_' variables indicating which of the parameters named in
SELECT identify the row and column, and the `_cov_' variable containing
the numerical value.  The first variable named in VARIABLE-LIST is the
cell count for the cells.  Cells are classified by the remaining
variables in VARIABLE-LIST.  Additional auxiliary variables, such as
the total number of observations or marginal totals, that are required
for computing expected cell counts (see `expect' below) can be listed
in AUX-VARIABLE-LIST.  All variables in VARIABLE-LIST and in
AUX-VARIABLE-LIST must be coded as double; this allows `categ' to work
with continuous and categorical variables together.  The input dataset
must be sorted according to the classification variables in
VARIABLE-LIST in the order that they appear there.  If non-null, the
trace option TRACE is passed to `dap_maximize' for tracing the maximum
likelihood iteration.

   The string SELECT is a space-separated sequence of parameter names,
each one optionally preceded by either a `!' to indicate that it is to
omitted from the model or `?' to indicate that it should be omitted
from the reduced model only.  The number of parameters must equal the
dimension of the PARAM array and the order corresponds to the order of
entries in that array.  Note that the parameter names need not
correspond to variables in the dataset, they are used only to identify
their estimates in the output.  If there are no `?'s, then the goodness
of fit statistics computed are relative to the saturated model.  If
there are `?'s, then the goodness of fit statistics are computed
relative to the reduced model obtained by setting all the `?'s to `!'s.

   `Categ' assumes that the parameters in PARAM are independent and
computes the degrees of freedom as the number of cells minus the number
of parameters.  See `estimate' (*note Statistics utilities::) to see
how to obtain statistics on the remaining parameters or contrasts.  The
initial values of the parameters for the maximum likelihood estimation
must be supplied in the call to `categ'; they are not modified by
`categ'.  The function pointed to by EXPECT must take two parameters,
an array of parameter values, with dimension equal to the number of
parameters specified by the string SELECT, followed by an array of
classification, and possibly auxiliary, values, with dimension equal to
the number of classification and auxiliary variables in VARIABLE-LIST,
and return the expected number of observations for the indicated cell,
based on the parameter, classification, and auxiliary (if any) values
supplied.

   Note: `categ' creates or overwrites the dataset DATASET.fil to
create a dataset with no missing cells for the analysis.

Code fragment(s)

   _Use the user-defined function `expect' to fit and test a loglinear
model and print a table of the observed and fitted cell counts; in the
dataset `deathpen', the variable `n' gives the cell counts for the
three-way table classified by `def', `vic', and `pen' and `param' is an
array of 7 independent parameters:_
     double expect(double param[8], double class[2]);
     categ("cda262", "count income jobsat", &expect, param,
           "mu <6 6-15 15-25 VD LD MS ?Inc*Sat", "", "");
     sort("cda262.cat", "income _type_ jobsat", "");
     table("cda262.cat.srt", "income", "_type_ jobsat count", "6.2", "");

SPECIFICATION
     loglin(DATASET, VARIABLE-LIST, MODEL0, MODEL1, PARTVARS)
     DATASET, VARIABLE-LIST, MODEL0, MODEL1, PARTVARS: string

Description

   The function `loglin' fits the hierarchical loglinear models
specified by MODEL0 and MODEL1 and compares them.  The first variable
named in VARIABLE-LIST gives the cell counts and must be of type
double, the remainder give the classification and must be strings.  The
strings MODEL0 and MODEL1 consist of one or more space-separated terms,
each term of which is a `*'-separated list of classification variables.
The model specified by MODEL1 must incorporate at least as many effects
as the one specified by MODEL0.  If MODEL0 is the null string (not
NULL), then MODEL1 is compared to the saturated model.  The dataset
DATASET must be sorted according to the partitioning variables and the
classification variables in the order listed in VARIABLE-LIST.
Further, if the input dataset is partitioned, the input data for each
part must have the same table layout and size.  The function `loglin'
creates the dataset DATASET.llm and calls function `categ', which
creates the dataset DATASET.llm.cat, which contains the observed and
fitted cell counts and is copied back to DATASET.llm.

   The output in the `lst' file reports the estimate and asymptotic
standard error for each of the independent parameters of the model,
using zero-sum constraints to eliminate dependent parameters.

Code fragment(s)

   _Compare the models `vic*pen def*vic' and `def*pen vic*pen def*vic'
using counts in `n', which gives the cell counts for the three-way
table classified by `def', `vic', and `pen':_
     loglin("deathpen", "n def vic pen",
            "vic*pen def*vic", "def*pen vic*pen def*vic", "");
     sort("deathpen.llm", "def vic _type_ pen", "");
     table("deathpen.llm.srt", "def vic", "_type_ pen n", "s6.2 30", "");


File: dap,  Node: Linear regression,  Next: Logistic regression,  Prev: Categorical data analysis,  Up: Statistics functions

Linear regression
=================

SPECIFICATION
     linreg(DATASET, Y-VARIABLE-LIST, X0-VARIABLE-LIST, X1-VARIABLE-LIST, PARTVARS, X-DATASET, LEVEL)
     DATASET, Y-VARIABLE-LIST, X0-VARIABLE-LIST, X1-VARIABLE-LIST, PARTVARS, X-DATASET: string
     LEVEL: double

     proc reg [data=DATASET-NAME] [outest=DATASET-NAME];
     model RESPONSE-VARIABLES = EXPLANATORY-VARIABLES;
     [var VARIABLE-LIST;]
     [add VARIABLE-LIST;]
     by VARIABLE-LIST;
     [plot Y-VARIABLE * X-VARIABLE;]

Description

   Performs ordinary least squares linear regression for each variable
in Y-VARIABLE-LIST as a function of all the variables in
X0-VARIABLE-LIST and X1-VARIABLE-LIST, computes t-tests on each
parameter, and and tests the full model against the model with just the
variables in X0-VARIABLE-LIST.  The model always includes an intercept
term, which is named _intercept_ and is always included implicitly in
X0-VARIABLE-LIST.

   Results are displayed in the `lst' file.  In addition, for each of
the specified values of the variables in X0-VARIABLE-LIST and
X1-VARIABLE-LIST, observed and predicted values and lower and upper
confidence limits for the mean at LEVEL for each of the variables in
Y-VARIABLES are written to DATASET.reg in lines identified by the
respective values `OBS', `PRED', `LOWER', and `UPPER' of the `_type_'
variable.  These values are given as the values of the Y-VARIABLES in
DATASET.reg.  If X-DATASET is non-null, specified values for the
x-variables are read from that dataset; otherwise, the values of the
x-variables in DATASET are used.  Finally, the estimates and covariance
matrix are written to the file DATASET.cov, with the `_type_' variable
set to `ESTIMATE' and `COVAR', respectively, the `_response_' variable
indicating the response variable and the `_param1_' and `_param2_'
variables indicating which parameters identify the row and column, and
the `_cov_' variable containing the numerical value.

   SBS note: If you include a `plot' statement, then the model must
contain only one response and one explanatory variable. If there is an
`add' statement, the model will be fit as originally specified and with
the additional variables and the change in R-squared will be reported.
The `var' statement is ignored in any case.

Code fragment(s)

   _Perform linear regression of the response variable `strength' on
the independent variables `length' and `thickness', based on the values
in the dataset `wires', and compare the full model with the reduced
model that contains the intercept term only:_
     linreg("wires", "strength", "", "length thickness", "", NULL, 0.0);

   _Perform linear regression of the response variable `strength' on
the independent variables `length' and `thickness', based on the values
in the dataset `wires', and compare the full model with the reduced
model that contains the intercept term and `length' only; also compute
predicted values and the endpoints of 95% confidence intervals for the
mean of the response for the values of `length' and `thickness' in the
dataset `steps':_
     linreg("wires", "strength", "length", "thickness", "", "steps", 0.95);


File: dap,  Node: Logistic regression,  Next: Nonparametric analyses,  Prev: Linear regression,  Up: Statistics functions

Logistic regression
===================

SPECIFICATION
     logreg(DATASET, Y-SPEC, X0-VAR-LIST, X1-VAR-LIST, PARTVARS, X-DATASET-NAME, LEVEL)
     DATASET, Y-SPEC, X0-VAR-LIST, X1-VAR-LIST, PARTVARS, X-DATASET-NAME: string
     LEVEL: double

     proc logistic [data=DATASET-NAME] [outest=DATASET-NAME];
     model {VARIABLE | EVENTS/TRIALS} = EXPLANATORY-VARIABLES;
     by VARIABLE-LIST;

Description

   Performs logistic regression for the response variable in Y-SPEC as
a function of all the variables in X0-VAR-LIST and X1-VAR-LIST, and
tests the full model against the model with just the variables in
X0-VAR-LIST.  The model always includes an intercept term, which is
named `_intercept_' and is always included implicitly in X0-VAR-LIST.
Variables in Y-SPEC, X0-VAR-LIST, and X1-VAR-LIST must be of type
double.  Two forms for the response in Y-SPEC are available:
EVENTS-VARIABLE / TRIALS-NUMBER, in which TRIALS-NUMBER is an explicit
number (e.g., 1 for binary data), and EVENTS-VARIABLE / TRIALS-VARIABLE,
in which EVENTS-VARIABLE is a count of successes in the number of
trials specified by TRIALS-VARIABLE.

   Results are displayed in the `lst' file.  In addition, for each of
the specified values of the variables in X0-VAR-LIST and X1-VAR-LIST,
observed and predicted probabilities and lower and upper confidence
limits at LEVEL for the probability that the EVENTS-VARIABLE is 1 are
written to DATASET.lgr in lines identified by the respective values
`PRED', `LOWER', and `UPPER' of the `_type_' variable.  These values
are given as the values of the EVENTS-VARIABLE in DATASET.lgr.  If
X-DATASET-NAME is non-null, specified values for the x-variables are
read from that dataset; otherwise, the values of the x-variables in
DATASET are used.  Finally, the estimates and covariance matrix are
written to the file DATASET.cov, with the `_type_' variable set to
`ESTIMATE' and `COVAR', respectively, the `_param1_' and `_param2_'
variables indicating which parameters identify the row and column, and
the `_cov_' variable containing the numerical value.

   SBS note: only binary response is allowed, although the
EVENTS/TRIALS form allows that to be expressed as the result of a
binomial experiment.

Code fragment(s)

   _Perform logistic regression with the binomial response variable
`heartdis', with values from 0 to `ncases' in each observation, on the
independent variable `bloodpress', based on the values in the dataset
`heartrisk':_
     logreg("heartrisk", "heartdis / ncases",
                      "", "bloodpress", "", NULL, 0.0);

   _Perform logistic regression with the binomial response variable
`larvae', with values from 0 to 10 in each observation, on the
independent variable `co2', based on the values in the dataset
`biocontrol'; also computed predicted values and the endpoints of 95%
confidence intervals for the mean response:_
     logreg("biocontrol", "larvae / 10",
                      "", "co2", "", "biocontrol.mns", 0.95);


File: dap,  Node: Nonparametric analyses,  Next: Statistics utilities,  Prev: Logistic regression,  Up: Statistics functions

Nonparametric analyses
======================

SPECIFICATION
     nonparam(DATASET, VARIABLE-LIST, PARTVARS)
     DATASET, VARIABLE-LIST, PARTVARS: string

     proc npar1way [data=DATASET-NAME];
     class CLASS-VARIABLE;
     var VARIABLE-LIST;
     by VARIABLE-LIST;

Description

   If VARIABLE-LIST contains the name of only one variable, which must
be of type double, then `nonparam' tests the Wilcoxon signed rank
statistic on the values of that variable.  If VARIABLE-LIST contains
the names of two variables, then the first must be of type double and
the second must be of type string.  If the second variable has two
levels, then `nonparam' tests the Wilcoxon rank sum statistic and the
Kolmogorov two-sample statistic of the values of the first variable
classified by the values of the second.  If the second variable has
more than two levels, then `nonparam' tests the Kruskal-Wallis
statistic of the values of the first variable classified by the values
of the second.  The input dataset does not need to be sorted.

   SBS note: In `proc npar1way', the `class' and `var' statements are
required and the class variable must be of type string.

Code fragment(s)

   _For each distince value of `sex', perform a Wilcoxon signed rank
test on the values of `weightchange':_
     nonparam("diettest", "weightchange", "sex");

   _Perform a Kuskal-Wallis test on the values of `weightchange' as
classified by `drug':_
     nonparam("diettest", "weightchange drug", "");


File: dap,  Node: Statistics utilities,  Prev: Nonparametric analyses,  Up: Statistics functions

Statistics utilities
====================

SPECIFICATION
     estimate(DATASET, PARAMETERS, DEFINITIONS, PARTVARS)
     DATASET, PARAMETERS, DEFINITIONS, PARTVARS: string

Description

   `Estimate' prints the estimate and standard error for each of the
parameters defined in DEFINITIONS, based on the estimates and
covariance matrix provided by the dataset DATASET for the parameters
named in the space-separated list PARAMETERS.  DATASET is typically the
`.cov' dataset output by a function such as `loglin', `categ',
`linreg', or `logreg' and must contain, in addition to the `_type_'
variable, variables named `_param1_', `_param2_', and `_cov_': the
first two are string variables specifying the parameters by which the
estimates and covariance matrix are indexed and the last is the entry
in the estimate vector or covariance matrix.  For the value `ESTIMATE'
of `_type_', the variable `_param2_' specifies the parameter. The value
`COVAR' of `_type_' indicates that the value of `_cov_' is an entry in
the covariance matrix.

   The string `definitions' is a space-separated list of equations of
the form PARAM = COEFFICIENT_1 PARAM_1 ... COEFFICIENT_N PARAM_N, in
which PARAM_1 through PARAM_N are the names of parameters whose
estimates and covariances appear in DATASET or a previous definition
and each COEFFICIENT is a decimal number.  A `+' is optional for
positive coefficients.  COEFFICIENT_1 may be omitted if it would be a
`+1'.

Code fragment(s)

   _Use the user-defined function `expect' to fit and test a saturated
logit model for the 4 by 2 table with 4 rootstocks, A, I, II, and U,
and two levels of disease, 0 and 1.  `param' is an array of 8
independent parameters based on the identifiability constraints
lambda_A + lambda_I + lambda_II + lambda_U = 0, lambda_d0 + lambda_d1 =
0, and mu_A + mu_I + mu_II + mu_U = 0.  Finally use `estimate' to
define the missing parameter mu_U and test the contrast diff_I_U = mu_I
- mu_U:_
     double expect(double param[8], double class[2]);
     categ("rootdisease", "_cell_ root disease", &expect, param,
           "mu lambda_A lambda_I lambda_II lambda_d0 mu_A mu_I mu_II", "", "");
     estimate("rootdisease.cov", "mu_A mu_I mu_II",
            "mu_U = - mu_A - mu_I - mu_II diff_I_U = mu_I - mu_U", "");


File: dap,  Node: Graphics functions,  Next: Utilities,  Prev: Statistics functions,  Up: Top

Graphics functions
******************

* Menu:

* Histogram:: histogram
* Normal probability plot:: normal
* Scatter plot or line graph:: plot
* Plotting means:: plotmeans
* Regression plots:: plotlinreg and plotlogreg
* Displaying the pictures:: port, land, nport, nland


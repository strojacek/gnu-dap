This is dap, produced by makeinfo version 4.5 from dap.texi.

INFO-DIR-SECTION Dap statistics and graphics package
START-INFO-DIR-ENTRY
* Dap: (dap).                The Dap statistics package
END-INFO-DIR-ENTRY


File: dap,  Node: Histogram,  Next: Normal probability plot,  Up: Graphics functions

Histogram
=========

SPECIFICATION
     histogram(DATASET, VARIABLE-LIST, PARTVARS, NBARS, STYLE, XFUNCT, NPLOTS)
     DATASET, VARIABLE-LIST, PARTVARS, STYLE: string
     NBARS, NPLOTS: int
     XFUNCT: pointer to function returning double
     RETURNS: array of `pict'

     proc chart [data=DATASET-NAME];
     by VARIABLE-LIST;
     vbar VARIABLE / [freq=VARIABLE] [levels=N]
                       [axis=[MIN] MAX]
                       [type=freq | percent | pct];

Description

   Constructs an array of `pict' structures for drawing (*note
Displaying the pictures::) separate histograms of the values of the
first variable in VARIABLE-LIST, weighted by the second variable, if
present, in VARIABLE-LIST, for each distinct set of values of PARTVARS.
The first variable name may be followed by a string, enclosed in back
quotes (``'), to be used instead of the variable name as the x-axis
label.  Each histogram has NBARS bars.  The string STYLE is either the
null string or contains axis specifications as for `pict_autoaxes'
(*note Axes::) and can optionally specify `EQUAL' or `VARIABLE' width
bars, each of which represents either the `COUNT' (only for equal width
bars) or `PERCENT' or `FRACTION' of the observations.  If STYLE
contains the word `MINX', followed without a space by a number, then
the horizontal minimum point of the histogram(s) is that number.  If
STYLE contains the word `MAXX', followed without a space by a number,
then the horizontal maximum point of the histogram(s) is that number.
If STYLE contains the word `MAXY', followed without a space by a number,
then the vertical maximum point of the histogram(s) is that number.  If
STYLE contains the word `ROUND', then the right and left ends of the
histogram are expanded, if necessary, to make the width of the bars
rounded to 1 digit.  The function pointed to by XFUNCT applies to the
x-axis as in the description of `pict_autoaxes'.  The default is equal
width bars of counts.  The integer NPLOTS must be at least as large as
the number of parts created by PARTVARS.  The function `histogram'
allocates an array of `picts' for the histograms and axes, in which the
picts for all the plots come first, followed by an equal number of
`pict's for the corresponding axes, and returns the starting address of
that array.

Code fragment(s)

   _Display a histogram, in portrait orientation with a surrounding
box, of 10 variable-width bars that show counts of the values of
`height' in the dataset `people':_
     nport(histogram("people", "height", "",
                               10, "VARIABLE ==", NULL, 1), 1, 1);

   _Display a histogram for each of 58 counties, on 58 pages in
portrait orientation with axes at (0, 0), of 25 equal-width bars
extending from 0 to 84 that show counts of the values of `height' in
the dataset `people':_
     nport(histogram("people", "height", "county",
                               25, "MIN0 MAX84", NULL, 58), 58, 1);

   _Display a histogram for each of 58 counties, on 58 pages in
portrait orientation with axes at (0, 0), of 25 equal-width bars that
show percentages of the values of `height' in the dataset `people':_
     nport(histogram("people", "height", "county",
                               25, "PERCENT", NULL, 58), 58, 1);


File: dap,  Node: Normal probability plot,  Next: Scatter plot or line graph,  Prev: Histogram,  Up: Graphics functions

Normal probability plot
=======================

SPECIFICATION
     normal(DATASET, VARIABLE, PARTVARS, NPLOTS)
     DATASET, VARIABLE, PARTVARS: string
     NPLOTS: int
     RETURNS: array of `pict'

Description

   If NPLOTS is greater than 0, constructs an array of `pict'
structures for drawing (*note Displaying the pictures::) a q-q plot of
the values of VARIABLE for each part of DATASET defined by the values
of PARTVARS.  If the number of values is at least 3 but no more than
2000, performs a Shapiro-Wilk test for normality, the results of which
are reported in the lst file and, if NPLOTS is greater than 0, in the
caption of the `pict's.  Each q-q plot is prepared for display on a
separate page.  The integer NPLOTS must be at least as large as the
number of parts created by PARTVARS.  The function `normal' allocates
an array of PICTS for the plots and axes, in which all the plots come
first, and returns the address of that array.

Code fragment(s)

   _For each distinct value of `block', display a q-q plot of the
values of `yield' and apply the Shapiro-Wilk test for normality:_
     nport(normal("wheat", "yield", "block", 4), 4, 1);


File: dap,  Node: Scatter plot or line graph,  Next: Plotting means,  Prev: Normal probability plot,  Up: Graphics functions

Scatter plot or line graph
==========================

SPECIFICATION
     plot(DATASET, XYVAR, PARTVARS, STYLE, XFUNCT, YFUNCT, NPLOTS)
     DATASET, XYVAR, PARTVARS, STYLE: string
     XFUNCT, YFUNCT: pointer to function returning double
     NPLOTS: int
     RETURNS: array of `pict'

     proc plot [data=DATASET-NAME];
     by VARIABLE-LIST;
     plot Y-VARIABLE * XVARIABLE [/ [box]];
     [...
     plot Y-VARIABLE * XVARIABLE [/ [box]];]

Description

   For DATASET, constructs an array of `pict' structures for plotting
(*note Displaying the pictures::) the points whose coordinates are in
the two variables listed in XYVAR.  Each of those variable names may be
followed by a string, enclosed in back quotes, to be used instead of
the variable name as the axis label.  Points are plotted in the order
that they appear in the dataset and therefore must be sorted for a line
graph.  The default type of graph is a scatter plot with circles
marking the points.  To get a line graph, you must set the value of the
`pict_type' field of the `pict' to the string `LINE'; see the
description of the `pict' structure.  If the first character of STYLE
is `o' and is not followed by an integer, then the plots for the
different values of the PARTVARS are all prepared to be displayed on
the same pair of axes on the same page.  If the first character of
STYLE is `o' and is followed by an integer N, then the plots are
overlayed in consecutive groups of size N.  Otherwise those plots are
prepared to be displayed on different pages.  The remaining characters
of STYLE and the functions XFUNCT and YFUNCT are axis specifications as
for `pict_autoaxes' (*note Axes::).  The integer NPLOTS must be at
least as large as the number of groups created by PARTVARS.  The
function `plot' allocates an array of `pict's for the plots and axes,
in which all the plots come first, and returns the address of that
array.

Code fragment(s)

   _Display a scatter plot in portrait orientation with `height' on the
horizontal axis and `weight' on the vertical axis:_
     nport(plot("people", "height weight", "", "", NULL, NULL, 1), 1, 1);

   _Overlay 4 scatter plots, one for each distinct value of `plot', on
one page in portrait orientation, with `fert' on the horizontal axis
and `yield' on the vertical axis, and make the symbols be open circles,
filled-in circles, open squares, and filled-in squares, respectively:_
     pict *p;
     
     p = plot("wheat", "fert yield", "plot", "o", NULL, NULL, 4);
     strcpy(p[0].pict_type, "CIRC");
     strcpy(p[1].pict_type, "CIRC");
     p[1].pict_fgray = 0.0;
     strcpy(p[2].pict_type, "SQUA");
     strcpy(p[3].pict_type, "SQUA");
     p[3].pict_fgray = 0.0;
     nport(p, 4, 4);

   _Display one boxed line graph per page in portrait orientation for
each of the 2 distinct values of `species' with `time' on the horizontal
axis and `logpop' on the vertical axis, with the `exp' function applied
to the vertical coordinate labels:_
     pict *p;
     
     p = plot("bacteria", "time logpop", "species",
                                          "==", NULL, &exp, 2);
     strcpy(p[0].pict_type, "LINE");
     strcpy(p[1].pict_type, "LINE");
     nport(p, 2, 1);

   _Overlay 6 boxed scatter plots, one for each distinct value of
`plot', 3 per page on 2 pages in portrait orientation, with `fert' on
the horizontal axis and `yield' on the vertical axis, and make the
symbols be open circles, open triangles, and open squares,
respectively, on each of the 2 pages:_
     pict *p;
     
     p = plot("wheat", "fert yield", "plot variety",
                                          "o3 ==", NULL, NULL, 6);
     strcpy(p[0].pict_type, "CIRC");
     strcpy(p[1].pict_type, "TRIA");
     strcpy(p[2].pict_type, "SQUA");
     strcpy(p[3].pict_type, "CIRC");
     strcpy(p[4].pict_type, "TRIA");
     strcpy(p[5].pict_type, "SQUA");
     nport(p, 6, 3);


File: dap,  Node: Plotting means,  Next: Regression plots,  Prev: Scatter plot or line graph,  Up: Graphics functions

Plotting means
==============

SPECIFICATION
     plotmeans(DATASET, Y-VARIABLE, X-VARIABLE, ERRORBARS, STYLE, PARTVARS, NOVERLAY)
     DATASET, Y-VARIABLE, X-VARIABLE, ERRORBARS, STYLE, PARTVARS: string
     NOVERLAY: int
     RETURNS: array of `pict'

Description

   Constructs an array of `pict' structures for plotting (*note
Displaying the pictures::) the mean, with an error bar, of Y-VARIABLE
for each value of X-VARIABLE.  Both variables must be of type double
and either or both may be followed by a string, enclosed in back quotes,
to be used instead of the variable name as the axis label.  The height
of the error bar above and below the mean can be specified to be any
statistic available for the `means' function, optionally multiplied by
a scale factor, which follows the statistic name and a space in
ERRORBARS.  The string STYLE is as in PLOT, except that overlaying is
controlled by PLOTMEANS and must not be specified in STYLE.  If
PARTVARS is null (""), then the array of `pict's has two elements, the
first for the error bars and the second for the means.  If PARTVARS is
not null but NOVERLAY is 1, then the array of `pict's has those same
two elements for each part of the dataset and each plot is on a
separate page.  If PARTVARS is not null and NOVERLAY is greater than 1,
then the array of `pict's has those same two elements for each part of
the dataset but the elements are linked so that NOVERLAY pictures
appear on the same set of axes.  NOTE: this function creates the
following datasets or overwrites them if they exist: DATASET.mns,
DATASET.err, and DATASET.err.srt.

Code fragment(s)

   _For each distinct value of `thickness', compute the mean and
standard deviation of the values of `strength' and display on a single
page in portrait orientation the means with error bars extending the
standard deviation above and below the mean:_
     nport(plotmeans("wires", "strength", "thickness", "SD",
                                                      "", 0), 2, 2);

   _For each distinct value of `thickness', compute the mean and
standard error of the mean of the values of `strength' and display on a
single page in portrait orientation the means with error bars extending
1.96 times the standard error of the mean above and below the mean:_
     nport(plotmeans("wires", "strength", "thickness", "SEM 1.96",
                                                      "", 0), 2, 2);

   _For each of 3 distinct values of `metal' display a separate page on
which appears, for each distinct value of `thickness', the means of
`strength' with error bars extending the standard deviation above and
below the mean:_
     nport(plotmeans("wires", "strength", "thickness", "SD",
                                                      "metal", 1), 6, 2);

   _For each of 3 distinct values of `metal', display overlayed on a
single page the means of `strength' for each distinct value of
`thickness', with error bars extending the standard deviation above and
below the mean:_
     nport(plotmeans("wires", "strength", "thickness", "SD",
                                                      "metal", 3), 6, 6);


File: dap,  Node: Regression plots,  Next: Displaying the pictures,  Prev: Plotting means,  Up: Graphics functions

Regression plots
================

SPECIFICATION
     plotlinreg(DATASET, Y-VARIABLE, X-VARIABLE, STYLE, PARTVARS, NPARTS, LEVEL)
     DATASET, Y-VARIABLE, X-VARIABLE, STYLE, PARTVARS: string
     NPARTS: int
     LEVEL: double
     RETURNS: array of `pict'

Description

   Runs LINREG on DATASET, allocates an array of `pict's for the plots
and axes for the plots of the observed data the regression line, and
the curves enclosing a LEVEL confidence region for the predicted mean of
Y-VARIABLE, and returns the address of the array of `pict's, to be
displayed as NPARTS page(s) of 4 overlayed pictures each (*note
Displaying the pictures::).  Both X-VARIABLE and Y-VARIABLE must be
single variables and each may be followed by an axis label enclosed in
pairs of ``'.  DATASET must be partitioned by PARTVARS into exactly
NPARTS parts.  STYLE may contain axis specifications as for
`pict_autoaxes' (*note Axes::).  NOTE: This function creates the
following datasets or overwrites them if they exist: DATASET.mns,
DATASET.reg, and DATASET.reg.srt.

Code fragment(s)

   _Display on one page a scatter plot of the data, with `thickness' on
the horizontal axis, which will be labeled `Thickness', and `strength'
on the vertical axis, while will be labeled `Strength', and the
regression line and the curves defining a 95% confidence region for the
predicted means:_
     nport(plotlinreg("wires", "stren`Strength`", "thick`Thickness`",
                      "==", "", 1, 0.95), 4, 4);

   _For each of the 4 values of the variable `plot', display on a
separate page a scatter plot of the data, with `salin' on the horizontal
axis and `yield' on the vertical axis, the regression line, and the
curves defining a 95% confidence region for the predicted means:_
     nport(plotlinreg("pist", "yld", "sal", "==", "plot", 4, 0.95), 16, 4);

SPECIFICATION
     plotlogreg(DATASET, Y-SPEC, X-VARIABLE, STYLE, NGROUPS, PARTVARS, NPARTS, LEVEL)
     DATASET, Y-SPEC, X-VARIABLE, STYLE, PARTVARS: string
     NGROUPS, NPARTS: int
     LEVEL: double
     RETURNS: array of `pict'

Description

   Runs LOGREG on DATASET, allocates an array of `pict's for the plots
and axes for plots the logistic regression curve and the curves
enclosing a LEVEL confidence region for the predicted expectation of
the response variable in Y-SPEC, and returns the starting address of
the array of `pict's, to be displayed as NPARTS page(s) of 4 overlayed
pictures each (*note Displaying the pictures::).  Also plots the mean
of the response variable in Y-SPEC for the NGROUPS groups of the
observations.  The list X-VARIABLE must contain only one variable;
Y-SPEC is as in LOGREG.  The response variable in Y-SPEC and the
variable in X-VARIABLE may be followed by axis labels enclosed in ``'.
DATASET must be partitioned by PARTVARS into exactly NPARTS parts.
STYLE may contain axis specifications as for `pict_autoaxes' (*note
Axes::).  NOTE: This function creates the following datasets or
overwrites them if they exist: DATASET.trl, DATASET.trl.grp,
DATASET.trl.grp.srt, DATASET.trl.grp.srt.mns, DATASET.mns, DATASET.lgr,
and DATASET.lgr.srt.

Code fragment(s)

   _Display on one page the mean success rate for each of 5 consecutive
groups of the data, ordered by `lab', and the logistic regression line,
and the curves defining a 95% confidence region for the predicted
fraction of success:_
     nport(plotlogreg("can", "rem`Remissions` / 1", "lab`Labeling index`",
                      "==", 5, "", 1, 0.95), 4, 4);

   _Display on one page the mean fraction of `rem' per `case' for each
of 5 consecutive groups of the data, ordered by `lab', and the logistic
regression line, and the curves defining a 95% confidence region for
the predicted fraction of `rem' per `case':_
     nport(plotlogreg("can", "rem/case", "lab", "==", 5, "", 1, 0.95),
           4, 4);

   _For each of the 3 values of the variable `hosp', display on a
separate page the mean fraction of `rem' per `case' for each of 5
consecutive groups of the data, ordered by `lab', and the logistic
regression line, and the curves defining a 95% confidence region for
the predicted fraction of `rem' per `case':_
     nport(plotlogreg("can", "rem/case", "lab", "==", 5, "hosp", 3, 0.95),
           12, 4);


File: dap,  Node: Displaying the pictures,  Prev: Regression plots,  Up: Graphics functions

Displaying the pictures
=======================

SPECIFICATION
     nport(P, NPLOTS, NPERPAGE)
     nland(P, NPLOTS, NPERPAGE)
     P: array of `pict'
     NPLOTS, NPERPAGE: int

Description

   Generates an NPLOTS / NPERPAGE page graphics output file, in
portrait or landscape orientation, from the `pict' array pointed to by
P with a total of NPLOTS plots, NPERPAGE per page.  As shown above, the
first argument of a call to `nport' or `nland' is usually provided
directly by the value returned from a call to a graphics function such
as `plotlogreg'.

Code fragment(s)

   _Display the 8 `pict's of the array `p' on 4 pages in portrait
orientation, with 2 `pict's per page:_
     pict *p;
     
     ...
     nport(p, 8, 2);

   _Display `pict's from `plotlogreg' in portrait orientation:_
     nport(plotlogreg("can", "nrem/ncase", "lab", "==", 5, "", 1, 0.95),
           4, 4);

   _Display `pict's from `plotlogreg' in landscape orientation:_
     nland(plotlogreg("can", "nrem/ncase", "lab", "==", 5, "", 1, 0.95),
           4, 4);


File: dap,  Node: Utilities,  Next: Picture functions,  Prev: Graphics functions,  Up: Top

Utilities: probability and miscellaneous functions
**************************************************

* Menu:

* Chi-squared distribution:: probchisq and chisqpoint
* F distribution:: probf and fpoint
* Normal distribution:: probz, zpoint, and varnorm
* t distribution:: probt and tpoint
* Uniform distribution:: varunif
* Miscellaneous functions::


File: dap,  Node: Chi-squared distribution,  Next: F distribution,  Up: Utilities

Chi-squared distribution
========================

SPECIFICATION
     probchisq(C, DF)
     C: double
     DF: int
     RETURNS: double

Description

   Returns the probability that a variable distributed as chi-squared
with DF degrees of freedom has a value greater than C.

Code fragment(s)

   _Assign to `p' the probability that a Chi-squared variable with 2
degrees of freedom will have a value exceeding 3.7:_
     double p;
     p = probchisq(3.7, 2);

SPECIFICATION
     chisqpoint(P, DF)
     P: double
     DF: int
     RETURNS: double

Description

   Returns the value that a variable that is distributed as chi-squared
with DF degrees of freedom exceeds with probability P.

Code fragment(s)

   _Assign to `c' the point that a Chi-squared variable with 3 degrees
of freedom exceeds with probability 0.05:_
     double c;
     c = chisqpoint(0.05, 3);


File: dap,  Node: F distribution,  Next: Normal distribution,  Prev: Chi-squared distribution,  Up: Utilities

F distribution
==============

SPECIFICATION
     probf(F, NUMER-DF, DENOM-DF)
     F: double
     NUMER-DF, DENOM-DF: int
     RETURNS: double

Description

   Returns the probability that a variable distributed as F with
NUMER-DF and DENOM-DF degrees of freedom has a value greater than F.

Code fragment(s)

   _Assign to `p' the probability that an F variable with 4 and 2
degrees of freedom will have a value exceeding 5.8:_
     double p;
     p = prob(5.8, 4, 2);

SPECIFICATION
     fpoint(P, NUMER-DF, DENOM-DF)
     P: double
     NUMER-DF, DENOM-DF: int
     RETURNS: double

Description

   Returns the value that a variable that is distributed as F with
NUMER-DF and DENOM-DF degrees of freedom exceeds with probability P.

Code fragment(s)

   _Assign to `f' the point that an F variable with 4 and 2 degrees of
freedom exceeds with probability 0.05:_
     double f;
     f = fpoint(0.05, 4, 2);


File: dap,  Node: Normal distribution,  Next: t distribution,  Prev: F distribution,  Up: Utilities

Normal distribution
===================

SPECIFICATION
     varnorm()
     RETURNS: double

Description

   Repeated calls return values (pseudo) independently sampled from a
standard normal distribution.

Code fragment(s)

   _Assign to `z' a value sampled from a standard normal distribution:_
     double z;
     z = varnorm();

SPECIFICATION
     probz(Z)
     Z: double
     RETURNS: double

Description

   Returns the probability that a standard normal variable has a value
no greater than Z.

Code fragment(s)

   _Assign to `p' the probability that a standard normal variable will
have a value not exceeding 1.645:_
     double p;
     p = probz(1.645);

SPECIFICATION
     zpoint(P)
     P: double
     RETURNS: double

Description

   Returns the value that a standard normal variable exceeds with
probability P.

Code fragment(s)

   _Assign to `z' the that a standard normal variable exceeds with
probability 0.05:_
     double z;
     z = zpoint(0.05);


File: dap,  Node: t distribution,  Next: Uniform distribution,  Prev: Normal distribution,  Up: Utilities

t distribution
==============

SPECIFICATION
     probt(T, DF)
     T: double
     DF: int
     RETURNS: double

Description

   Returns the probability that a variable distributed as Student's t
with DF degrees of freedom has a value greater than T.

Code fragment(s)

   _Assign to `p' the probability that a t variable with 3 degrees of
freedom will have a value exceeding 2.3:_
     double p;
     p = probt(2.3, 3);

SPECIFICATION
     tpoint(P, DF)
     P: double
     DF: int
     RETURNS: double

Description

   Returns the value that a variable that is distributed as Student's t
with DF degrees of freedom exceeds with probability P.

Code fragment(s)

   _Assign to `t' the point that a t variable with 4 degrees of freedom
exceeds with probability 0.05:_
     double t;
     t = tpoint(0.05, 4);


File: dap,  Node: Uniform distribution,  Next: Miscellaneous functions,  Prev: t distribution,  Up: Utilities

Uniform distribution
====================

SPECIFICATION
     varunif()
     RETURNS: double

Description

   Repeated calls return values (pseudo) independently sampled from a
uniform [0, 1] distribution.

Code fragment(s)

   _Assign to `u' a value sampled from a uniform [0, 1] distribution:_
     double u;
     u = varunif();


File: dap,  Node: Miscellaneous functions,  Prev: Uniform distribution,  Up: Utilities

Miscellaneous functions
=======================

SPECIFICATION
     dap_bincoeff(N, R)
     N, R: double
     RETURNS: double

Description

   Returns the binomial coefficient n C r.

SPECIFICATION
     dap_maximize(F, NX, X, STEP, TOL, TRACE)
     F: pointer to function returning double
     NX: int
     X, STEP, TOL: double
     TRACE: string
     RETURNS: double

Description

   Maximizes (or attempts to maximize) the function F of NX variables,
starting with the input point X.  The function `dap_maximize' uses a
simple hill-climbing algorithm, with numerically approximated partial
derivatives, starting with step-size STEP and halving the step-size as
necessary until it is less than TOL.  The string TRACE is either the
null string (not `NULL') for no tracing, or `TRACE', for continuous
tracing, or `PAUSE', for tracing and waiting for the user to press
<Enter> at each iteration.  Either `TRACE' or `PAUSE' may be followed,
with no spaces, by a number to specify how many steps should be taken
before each trace or pause.  If convergence is not obtained in
`DAP_MAXITER' steps *Note Appendix I::, that failure is reported before
returning.

Code fragment(s)

   _Assign to `max' the maximum value attained by the function of 2
variables `fun', starting with the values stored in `x', with a step
size of 0.01 and a tolerance in the independent variables of 0.001:_
     double fun(double x[2]);
     double max;
     double x[2];
     
     max = dap_maximize(&fun, 2, x, 0.01, 0.001, "");

   _Assign to `max' the maximum value attained by the function of 2
variables `fun', starting with the values stored in `x', with a step
size of 0.01 and a tolerance in the independent variables of 0.001 and
display a trace of the iterations:_
     double fun(double x[2]);
     double max;
     double x[2];
     
     max = dap_maximize(&fun, 2, x, 0.01, 0.001, "TRACE");

SPECIFICATION
     dap_numdate(DATE)
     DATE: string
     RETURNS: int

Description

   With DATE a date on or after January 1, 1752, in the form `MMDDYYYY'
or `MM/DD/YYYY', in which the `MM' and the `DD' in the latter form can
consist of a single digit, returns the number of days since December
31, 1751, otherwise returns -1.

Code fragment(s)

   _Assign to `d' the number 72143, i.e., the number of days that July
9, 1949 is later than December 31, 1751:_
     int d;
     d = dap_numdate("07091949");

SPECIFICATION
     dap_datenum(N, DATE)
     N: int
     DATE: string

Description

   With N the number of days since December 31, 1751, fills DATE with
the date in the form `MMDDYYYY'.  If N is not positive or is too large,
DATE is set to "?".

Code fragment(s)

   _Assign to `date' the string "07021761", i.e., the date 3471 days
after December 31, 1751:_
     char date[9];
     dap_datenum(3471, date);

SPECIFICATION
     dap_invert(MATRIX, ROWSCOLS)
     MATRIX: pointer to pointer to double
     ROWSCOLS: int
     RETURNS: int

Description

   Inverts the matrix, returns 1 if non-singular, 0 otherwise.  The
parameter MATRIX is an array of pointers to double, each double pointed
to being the first element of an array of double.

Code fragment(s)

     double **mat;
     int nonsing;
     nonsing = dap_invert(mat, 3);


File: dap,  Node: Picture functions,  Next: Examples,  Prev: Utilities,  Up: Top

Picture functions
*****************

   The most common use of the information in this chapter is to modify
one or more fields in the `pict' structure, which is described in the
first section of this chapter, returned by a dap graphics function.  In
addition, this chapter describes low-level picture functions.  Although
these picture functions are not needed in most dap programs, they are
useful for constructing custom graphics.  The functions that add
elements, shapes, or text to a picture must be followed by a call to
`pict_show' to include those objects in the graphics output file.
Complex pictures with, for example, different fonts for different
pieces of text or different sized circles, may be constructed in one of
two ways: either link the parts of the picture and call `pict_show'
once, on the head of the list, or call `pict_show' repeatedly, after
assembling each of the parts of the picture.

* Menu:

* Pict structure:: pict structure, pict_initpict, and pict_clearpict
* Axes:: pict_axes, pict_autoaxes, pict_maketick
* Elements:: pict_point, pict_line
* Shapes:: pict_circle, pict_rectangle, pict_hrect, pict_bhrect, pict_curve
* Text:: pict_text
* Transformations:: pict_translate, pict_rotate, pict_scale
* Graphics output file:: pict_port, pict_land, pict_init, pict_page, pict_show, pict_end
* Picture datasets:: pict_save, pict_rest


File: dap,  Node: Pict structure,  Next: Axes,  Up: Picture functions

Pict structure and pict_init
============================

   Dap graphics functions return arrays of `pict'.  The `pict' structure
contains the following fields that may be modified directly to change a
picture.  Numerical values are in points (1/72 inch).

pict_type: string (4 letters)

   This field must be one of the following strings:

   LINE

     Draw lines connecting successive points.

   SEGM

     Draw a separate segment for each successive pair of points.

   IBEA

     Draw an I-beam for each successive pair of points.  If the
     horizontal coordinates of the pair of points are equal, draw a
     vertical I-beam; if the vertical coordinates of the pair of points
     are equal, draw a horizontal I-beam; otherwise, report the error
     and exit.

   CIRC

     Draw each point as a circle.

   SQUA

     Draw each point as a square.

   TRIA

     Draw each point as a triangle.

   UTRI

     Draw each point as a upside-down triangle.

   DIAM

     Draw each point as a diamond.

   PATT

     At the position of each point, display the pattern pointed to by
     PICT_PATT.

pict_dash: double

   The dash length for lines if PICT_DASH > 0.0; the lines are not
dashed if PICT_DASH = 0.0.  The default is 0.0.

pict_font: string (up to 63 letters)

   A string specifying the font for displayed text, if any.  The
default is `Helvetica-Bold'.

pict_fs: double

   The font size for displayed text, if any.  The default is 12.0.

pict_lw: double

   The width for lines.  The default is 0.4.

pict_r: double

   The radius for circles and size for squares, triangles, upside-down
triangles, and diamonds.

pict_lgray: double

   The gray level for lines: 0.0 is completely black, 1.0 is completely
white.  The default is 0.0.

pict_fgray: double

   The gray level for fill:  if PICT_FGRAY < 0.0, then don't fill areas;
if PICT_FGRAY \ge 0.0, then fill areas, then draw the boundary lines.
The default is -1.0.

pict_patt: pointer to `pict'

   This field allows you to place a picture at each point: set
PICT_PATT to the address of the `pict' to be displayed.

pict_next: pointer to `pict'

   This field allows you to link pictures to be displayed on the same
page.

SPECIFICATION
     pict_initpict(PREV, P)
     PREV, P: pointer to `pict'

Description

   Initialize the `pict' pointed to by P, linking the `pict' pointed to
by PREV to it.  If PREV is `NULL', then no `pict' is linked to P.

Code fragment(s)

   _Initialize the picture structures `p[0]' and `p[1]' and link `p[0]'
to `p[1]':_
     pict p[2];
     
     pict_initpict(NULL, p);
     pict_initpict(p, p + 1);

SPECIFICATION
     pict_clearpict(P)
     P: pointer to `pict'

Description

   Frees up internal memory space used by P: use before calling
`pict_initpict' on P after it has been used.  Does not free P itself.

Code fragment(s)

   _Free the internal memory space used by `p':_
     pict p;
     
     pict_clearpict(&p);


File: dap,  Node: Axes,  Next: Elements,  Prev: Pict structure,  Up: Picture functions

Axes
====

SPECIFICATION
     pict_axes(P, MINX, MAXX, XTICKS, NXTICKS, MINY, MAXY, YTICKS, NYTICKS, AXSPEC, BPOS, LPOS, TPOS, RPOS)
     P: pointer to `pict'
     XTICKS, YTICKS: array of `tick'
     NXTICKS, NYTICKS: int
     AXSPEC: string
     BPOS, LPOS, TPOS, RPOS: double

Description

   Create axes in the `pict' pointed to by P with ticks along the
x-axis specified by the array XTICK of NXTICKS `tick's and ticks along
the y-axis specified by the array YTICKS of NYTICKS `tick's.  The ticks
must be in order.  The last tick is used to label the axis and the
numbers of ticks, NXTICKS and NYTICKS do not include this last tick.
The string AXSPEC is as for PICT_AUTOAXES.  The doubles BPOS, LPOS,
TPOS, and RPOS are the positions of the bottom or only x-axis, the left
or only y-axis, the top x-axis (if any), and the right y-axis (if any).
The variables MINX, MAXX, MINY, and MAXY give the endpoints of the axes.

Code fragment(s)

   _Creat axes in `p' with 11 ticks on each of the x- and y-axes as a
box whose lower and upper edges are at 0.0 and 100.0, respectively, and
whose left and right edges are at -10.0 and 10.0, respectively, with
ticks and numbers on all sides:_
     pict p;
     tick xt[12], yt[12];
     
     pict_axes(&p, xt, 12, yt, 12, "BB", 0.0, 100.0, -10.0, 10.0);

SPECIFICATION
     pict_autoaxes(P, XLABEL, YLABEL, AXSPEC, XFUNCT, YFUNCT, CAPTION, AUTOPOS)
     P: array of `pict'
     XLABEL, YLABEL, AXSPEC, CAPTION: string
     XFUNCT, YFUNCT: pointer to function returning double
     AUTOPOS: int

Description

   Create axes, as specified below, by AXSPEC for the linked list of
`pict's whose head is pointed to by P and whose tail is the `pict' to
contain the axes.  Unless otherwise specified, the axes extend to the
maximum and minimum values of x and y in the entire linked list of
`pict's (except the tail `pict'), but always include the origin.
Unless otherwise specified, the function PICT_AUTOAXES chooses an
appropriate spacing for the ticks on both axes.  The x- and y-axes are
labeled XLABEL and YLABEL, respectively, and the entire picture is
captioned by CAPTION.  The first part of the string AXSPEC consists of
0, 1, or 2 characters according to whether the default is used for both
axes, just the y-axis, or the axes are specified as follows,
respectively.  An axis specification is one of the characters `-', `+',
`0', `n', `=',  or `#', which indicate that the axis should be placed:
on the negative end of the other axis; the positive end; at 0; not at
all; or at both ends, without or with markings on the positive end.
The default is `0'.  The endpoints of the graph and the number of ticks
in each direction may be specified in AXSPEC after the first part of
the string (and at least one space) as follows: to set the minimum
point on the x-axis to a number, say `-3.6', use `MINX-3.6' (no
spaces). The maximum point on the x-axis and the minimum and maximum
points on the y-axis can be specified using `MAXX', `MINY', and `MAXY'
in the same way. To set the number of tick marks on the x-axis to a
number, say 14, use `NXTICKS14' (no spaces).  The number of ticks on
the y-axis can be set using `NYTICKS' in the same way.  The number of
significant figures used for the labels on the ticks can be specified
using `NXDIGITS' and `NYDIGITS', as in `NXDIGITS4'; the default is 3
digits.

   The functions XFUNCT and YFUNCT are applied to the true tick values
to create the tick labels.  Either one or both may be `NULL' to specify
that the tick labels equal the tick values.  If AUTOPOS is `PORTRAIT'
or `LANDSCAPE' (integer values, not strings, defined in the header
file), then APICT_UTOAXES automatically scales and positions the plot
appropriately.  No scaling and positioning is done if AUTOPOS is 0.

Code fragment(s)

   _Create axes in the last `pict' in the linked array given by `p'
with the horizontal axis labeled "time", the vertical axis labeled
"CFU", the horizontal axis at the most negative point the `pict's of
`p', the vertical axis at `time' = 0, the function `exp' used to
display numerical tick values on the vertical axis, the caption "CFU
per cm^2^ surface area" (with the `2' as a superscript), scaled and
placed appropriately on a page in portrait orientation:_
     pict *p;
     
     pict_autoaxes(p, "time", "CFU", "-0", NULL, &exp,
                                 "CFU per cm^2^ surface area", PORTRAIT);

SPECIFICATION
     pict_maketick(THETICK, POSITION, LABEL, LENGTH)
     TICK: pointer to `tick'
     POSITION, LENGTH: double
     LABEL: string

Description

   Make the `tick' pointed to by THETICK be at coordinate POSITION with
label LABEL and of length LENGTH.

Code fragment(s)

   _Create in `t' a tick with position 5.0, label "25.0", and length
3.0 points:_
     tick t;
     
     pict_maketick(&t, 5.0, "25.0", 3.0);


File: dap,  Node: Elements,  Next: Shapes,  Prev: Axes,  Up: Picture functions

Elements
========

SPECIFICATION
     pict_point(P, X, Y)
     P: pointer to `pict'
     X, Y: double

Description

   Add a point at (X, Y) to the `pict' pointed to by P.  Points added
to the same `pict' appear in the order in which they are added.

Code fragment(s)

   _Add a point at (7.2, -4.3) to `p':_
     pict p;
     
     pict_point(&p, 7.2, -4.3);

SPECIFICATION
     pict_line(P, X1, Y1, X2, Y2)
     P: pointer to `pict'
     X1, Y1, X2, Y2: double

Description

   Add a line from (X1, Y1) to (X2, Y2) to the `pict' pointed to by P.
Lines added to the same `pict' appear in the order in which they are
added.

Code fragment(s)

   _Add a line from (7.2, -4.3) to (9.1, 2.6) to `p':_
     pict p;
     
     pict_line(&p, 7.2, -4.3, 9.1, 2.6);


File: dap,  Node: Shapes,  Next: Text,  Prev: Elements,  Up: Picture functions

Shapes
======

SPECIFICATION
     pict_circle(P, X, Y, R)
     P: pointer to `pict'
     X, Y, R: double

Description

   Make the `pict' pointed to by P a circle of radius R, centered at
(X, Y).  NOTE: If a picture is to contain more than one circle, then
those circles must be created in separate `pict's that are linked
together.

Code fragment(s)

   _Add a circle with center (7.2, -4.3) and radius 3.0 to `p':_
     pict p;
     
     pict_circle(&p, 7.2, -4.3, 3.0);

SPECIFICATION
     pict_rectangle(P, X, Y, XSIDE, YSIDE)
     P: pointer to `pict'
     X, Y, XSIDE, YSIDE: double

Description

   Add a rectangle whose lower left corner is a (X, Y) and has
horizontal sides of length XSIDE and vertical sides of length YSIDE to
the `pict' pointed to by P.  NOTE: If a picture is to contain more than
one rectangle but those rectangles are not to be connected, then those
rectangles must be created in separate `pict's that are linked together.

Code fragment(s)

   _Add a rectangle with lower left corner (7.2, -4.3), width 4.0, and
height 4.5 to `p':_
     pict p;
     
     pict_rectangle(&p, 7.2, -4.3, 4.0, 4.5)

SPECIFICATION
     pict_hrect(P, SPACING, X, Y, XSIDE, YSIDE)
     pict_bhrect(P, SPACING, X, Y, XSIDE, YSIDE)
     P: pointer to `pict'
     SPACING, X, Y, XSIDE, YSIDE: double

Description

   Add a forward-hashed (respectively, backward-hashed) rectangle whose
lower left corner is at (X, Y) and has horizontal sides of length XSIDE
and vertical sides of length YSIDE to the `pict' pointed to by P.  The
horizontal space between hash lines is SPACING.  NOTE: If a picture is
to contain more than one rectangle but those rectangles are not to be
connected, then those rectangles must be created in separate `pict's
that are linked together.

Code fragment(s)

   _Add a rectangle with lower left corner (3.5, 29.0), width 1.0,
height 5.0, and with hashes sloping upwards at a spacing of 2.0 points
to `p':_
     pict p;
     
     pict_hrect(&p, 2.0, 3.5, 29.0, 1.0, 5.0);

   _Add a rectangle with lower left corner (3.5, 29.0), width 1.0,
height 5.0, and with hashes sloping downwards at a spacing of 2.0
points to `p':_
     pict p;
     
     pict_bhrect(&p, 2.0, 3.5, 29.0, 1.0, 5.0);

SPECIFICATION
     pict_curve(P, X, Y, T0, T1, NSEGMENTS)
     P: pointer to `pict'
     X, Y: pointer to function returning double
     T0, T1: double
     NSEGMENTS: int

Description

   Add a curve to the `pict' pointed to by P.  The curve is
parameterized by X and Y, which point to functions that take a single
argument of type double and return a result of type double.  If X is
`NULL', then that function is taken to be the identity function.  The
parameter varies from T0 to T1 in NSEGMENTS steps.  Curves (and lines
and points) added to the same `pict' are connected in the order in
which they are added.  NOTE: If a picture is to contain more than one
curve but those curves are not to be connected, then those curves must
be created in separate `pict's that are linked together.

Code fragment(s)

   _Add to `p' a curve parameterized by `cos' and `sin' with parameter
running from 0.0 to 2.0 * 3.14159 in 100 steps:_
     pict p;
     
     pict_curve(&p, &cos, &sin, 0.0, 2.0 * 3.14159, 100);

   _Add to `p' a graph of `exp' running from 0.0 to 3.0 in the
horizontal direction in 100 steps:_
     pict p;
     
     pict_curve(&p, NULL, &exp, 0.0, 3.0, 100);


File: dap,  Node: Text,  Next: Transformations,  Prev: Shapes,  Up: Picture functions

Text
====

SPECIFICATION
     pict_text(P, TEXT, X, Y, ANGLE, POS)
     P: pointer to `pict'
     TEXT, POS: string
     X, Y, ANGLE: double

Description

   Add text TEXT to the `pict' pointed to by P.  The string TEXT may
contain substrings enclosed between pairs of `^' for superscripts and
between pairs of `|' for subscripts.  The string TEXT may also contain
newline characters (`\n') for multi-line text.  The string POS consists
of either two or three letters that specify the position of the point
with coordinates X and Y relative to the text, as follows.  The first
character of POS is either `l', `c', or `r', for left, center, or
right, respectively, and the second letter is either `t', `m', or `b',
for top, middle, or bottom, respectively.  If the optional third
character of POS is a space, then a blank rectangle is formed to hold
the text.  The double ANGLE is counter-clockwise rotation in degrees to
be applied to text.

Code fragment(s)

   _Add to `p' the text "cm^3^ of H|2|O" (with the `3' as a superscript
and the `2' as a subscript) placed horizontally with its bottom center
at the point (306.0, 72.0):_
     pict p;
     
     pict_text(&p, "cm^3^ of H|2|O", 306.0, 72.0, 0.0, "cb");


File: dap,  Node: Transformations,  Next: Graphics output file,  Prev: Text,  Up: Picture functions

Transformations
===============

SPECIFICATION
     pict_translate(P, X, Y)
     P: pointer to `pict'
     X, Y: double

Description

   Translate (i.e., shift) the `pict' pointed to by P by X in the
x-direction and Y in the y-direction.  If the `pict' is linked to
another `pict', then that `pict' is translated the same way, and so on
until there are no more links.

Code fragment(s)

   _Translate all 4 pictures in the linked array `p' 306.0 points to
the right and 72.0 points up:_
     pict p[4];
     
     pict_translate(p, 306.0, 72.0);

SPECIFICATION
     pict_scale(P, X, Y, SX, SY)
     P: pointer to `pict'
     X, Y, SX, SY: double

Description

   Scale the `pict' pointed to by P by SX in the x-direction and SY in
the y-direction, leaving the point at (X, Y) fixed.  If the `pict' is
linked to another `pict', then that `pict' is scaled the same way, and
so on until there are no more links.

Code fragment(s)

   _Scale all 4 pictures in the linked array `p' by 1.5 in the
horizontal direction and 2.0 in the vertical direction, relative to the
fixed point (306.0, 72.0):_
     pict p[4];
     
     pict_scale(p, 306.0, 72.0, 1.5, 2.0);

SPECIFICATION
     pict_rotate(P, X, Y, DEGREES)
     P: pointer to `pict'
     X, Y, DEGREES: double

Description

   Rotate the `pict' pointed to by P counter-clockwise by DEGREES
around the point at (X, Y).  If the `pict' is linked to another `pict',
then that `pict' is rotated the same way, and so on until there are no
more links.

Code fragment(s)

   _Rotate all 4 pictures in the linked array `p' by 45.0 degrees
counterclockwise around the fixed point (306.0, 400.0):_
     pict p[4];
     
     pict_rotate(p, 306.0, 400.0, 45.0);


File: dap,  Node: Graphics output file,  Next: Picture datasets,  Prev: Transformations,  Up: Picture functions

Graphics output file
====================

   A graphics output file must be started with a call to `pict_init'
(or a function, such as `pict_port', that calls `pict_init') and ended
with a call to `pict_end'.

SPECIFICATION
     pict_port(NPAGES)
     pict_land(NPAGES)
     NPAGES: int

Description

   Calls `pict_init' to set up NPAGES portrait or landscape pages.

Code fragment(s)

   _Initialize a graphics output file for 3 pages in landscape
orientation:_
     pict_land(3);

SPECIFICATION
     pict_init(ORIENT, BBOXXL, BBOXYB, BBOXXR, BBOXYT, NPAGES)
     ORIENT, BBOXXL, BBOXYB, BBOXXR, BBOXYT, NPAGES: int

Description

   Initialize the graphics output file.  The character (not string)
ORIENT is either `l', for landscape or `p' for portrait.  The bounding
box is specified by the BBOX parameters and the number of pages by
NPAGES.  `pict_init' is called by `pict_portrait' and `pict_landscape'.

Code fragment(s)

   _Initialize a graphics output file for 4 pages in portrait
orientation with a bounding box with lower left corner (0, 0) and upper
right corner (612, 792):_
     pict_init(`p', 0, 0, 612, 792, 4);

SPECIFICATION
     pict_page()

Description

   Begin new page.

SPECIFICATION
     pict_show(P)
     P: pointer to `pict'

Description

   Write the picture commands to display the `pict' pointed to by P
into the graphics output file.  If P is linked to another `pict', then
show writes out the commands for that pict and so on until there are no
more links.

Code fragment(s)

   _Display the 4 `pict's in the linked array `p':_
     pict p[4];
     
     pict_show(p);

SPECIFICATION
     pict_end()

Description

   Terminate the graphics output file.


File: dap,  Node: Picture datasets,  Prev: Graphics output file,  Up: Picture functions

Picture datasets
================

SPECIFICATION
     pict_save(P, NPICTS, DATASET)
     P: pointer to `pict'
     NPICTS: integer
     DATASET: string

Description

   This function is useful for saving picture information generated by
graphics functions, such as `plotlogreg', that may require lengthy
execution times to generate pictures.  Saved picture datasets can be
restored quickly by calling `pict_rest'.

   The function `pict_save' saves the picture information in the array
of `pict's P to the datasets DATASET.picXXXX, DATASET.ptsXXXX, and
DATASET.txtXXXX, where `XXXX' is the index of the `pict' in the array.
If NPICTS is 0, then `pict_save' only saves the elements of `p' that
are linked together, starting at the first element.  Otherwise,
`pict_save' saves NPICTS `pict's in the array.  NOTE: graphics
functions, such as `plot', link an extra `pict' for each page or
overlayed `pict's for the axes.

   The following details are not needed for saving `pict' arrays
generated by `dap' graphics functions.  `Pict_save' calls itself to
save patterns, if any, referenced in elements of P using
DATASET.patXXXX as the DATASET argument.  Patterns must be either
single `pict's or linked arrays.  A link in the array P must always be
to an element with an index larger than the element linking to it.
(This condition is always satisfied by the `pict' arrays generated by
graphics functions.)

Code fragment(s)

   _Save the 4 `pict's in the linked array `p' in a picture datasets
with base name `picture':_
     pict p[4];
     
     pict_save(p, 0, "picture");

   _Save the 4 `pict's in the unlinked array `p' in a picture datasets
with base name `picture':_
     pict p[4];
     
     pict_save(p, 4, "picture");

   _Save the 10 `pict's created by `plotlogreg' in a picture datasets
with base name `grad':_
     pict_save(plotlogreg("grad", "grad/1", "GPA", "==", 5, "year", 2, 0.95),
               10, "grad");

SPECIFICATION
     pict_rest( DATASET)
     DATASET: string
     RETURNS: pointer to `pict'

Description

   Allocates an array of `pict's and restores into that array a picture
saved to DATASET by `pict_save'.

Code fragment(s)

   _Restore a picture from picture datasets with base name `picture'
into the array array `p':_
     pict *p;
     
     p = pict_rest("picture");

   _Restore and display a picture with 2 pages, created by
`plotlogreg', from picture datasets with base name `grad':_
     nport(pict_rest("grad"), 8, 4);


File: dap,  Node: Examples,  Next: Appendix I,  Prev: Picture functions,  Up: Top

Examples
********

   This chapter contains examples to illustrate the use of dap. Data
files, programs, and output for the examples are provided in a
directory named `examples'.

* Menu:

* Analysis of variance examples::
* Linear regression examples::
* Categorical data analysis examples::
* Logistic regression examples::
* Standard graphical output::
* Custom graphics::

